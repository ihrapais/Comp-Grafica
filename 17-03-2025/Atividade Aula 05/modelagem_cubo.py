# -*- coding: utf-8 -*-
"""modelagem cubo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qOYZm93Smx3bQMIybvvEm53qFiJchzjW
"""

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

#Anderson Lopes

class Cubo:
    def __init__(self, lado):
        self.lado = lado

    def volume(self):
        """Calcula o volume do cubo."""
        return self.lado ** 3

    def area_superficie(self):
        """Calcula a área da superfície do cubo."""
        return 6 * (self.lado ** 2)

    def desenhar(self):
        """Desenha o cubo em um gráfico 3D."""
        fig = plt.figure()
        ax = fig.add_subplot(111, projection='3d')

        # Define os vértices do cubo
        r = [0, self.lado]
        X, Y = np.meshgrid(r, r)
        Z = np.array([[0, 0], [0, 0]])  # Z para a base do cubo
        ax.plot_wireframe(X, Y, Z, color='r')  # Base inferior

        Z = np.array([[self.lado, self.lado], [self.lado, self.lado]])  # Z para o topo do cubo
        ax.plot_wireframe(X, Y, Z, color='r')  # Base superior

        # Conecta as arestas verticais
        for i in range(2):
            ax.plot_wireframe(X[i:i+1, :], Y[i:i+1, :], np.array([[0], [self.lado]]), color='r')

        # Conecta as arestas laterais
        for i in range(2):
            ax.plot_wireframe(np.array([[0], [self.lado]]), Y[:, i:i+1], X[:, i:i+1], color='r')

        ax.set_xlabel('X')
        ax.set_ylabel('Y')
        ax.set_zlabel('Z')
        ax.set_title('Cubo 3D')
        plt.show()

# Exemplo de uso da classe Cubo
lado = 3  # Defina o comprimento do lado do cubo
cubo = Cubo(lado)

print(f"Volume do cubo: {cubo.volume()}")
print(f"Área da superfície do cubo: {cubo.area_superficie()}")

# Desenha o cubo
cubo.desenhar()